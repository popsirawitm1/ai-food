<?xml version="1.0" encoding="UTF-8"?>
<project version="4">
  <component name="CopilotDiffPersistence">
    <option name="pendingDiffs">
      <map>
        <entry key="$PROJECT_DIR$/.gitignore">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/.gitignore" />
              <option name="updatedContent" value="# See https://help.github.com/articles/ignoring-files/ for more about ignoring files.&#10;&#10;# dependencies&#10;/node_modules&#10;/.pnp&#10;.pnp.js&#10;.yarn/install-state.gz&#10;&#10;# testing&#10;/coverage&#10;&#10;# next.js&#10;/.next/&#10;/out/&#10;&#10;# production&#10;/build&#10;&#10;# misc&#10;.DS_Store&#10;*.pem&#10;&#10;# debug&#10;npm-debug.log*&#10;yarn-debug.log*&#10;yarn-error.log*&#10;&#10;# local env files&#10;.env*.local&#10;.env&#10;&#10;# vercel&#10;.vercel&#10;&#10;# typescript&#10;*.tsbuildinfo&#10;next-env.d.ts&#10;" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/DEPLOY_SUCCESS.md">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/DEPLOY_SUCCESS.md" />
              <option name="updatedContent" value="#  สำเร็จแล้ว! Frontend Deploy บน Netlify&#10;&#10;## ✅ เว็บของคุณ:&#10;###  https://th-ai-food.netlify.app&#10;&#10;---&#10;&#10;## ⚠️ ขั้นตอนสุดท้าย: Deploy Backend (Python API)&#10;&#10;เว็บของคุณยังไม่สามารถทำนายได้ เพราะ Backend ยังทำงานบน localhost เท่านั้น&#10;ให้ทำตามขั้นตอนนี้เพื่อ Deploy Backend บน Railway:&#10;&#10;### **วิธีที่ 1: Deploy ผ่าน Railway Dashboard (แนะนำ - ง่ายที่สุด)**&#10;&#10;1. **Push โค้ดขึ้น GitHub:**&#10;   ```bash&#10;   # สร้าง GitHub repository ใหม่ที่ https://github.com/new&#10;   # ตั้งชื่อ: ai-food&#10;   &#10;   # จากนั้นรันคำสั่งนี้:&#10;   git branch -M main&#10;   git remote add origin https://github.com/YOUR-USERNAME/ai-food.git&#10;   git push -u origin main&#10;   ```&#10;&#10;2. **Deploy บน Railway:**&#10;   - ไปที่ https://railway.app&#10;   - คลิก **&quot;New Project&quot;**&#10;   - เลือก **&quot;Deploy from GitHub repo&quot;**&#10;   - เลือก repository **&quot;ai-food&quot;**&#10;   - เลือกโฟลเดอร์ **&quot;thai-food-ai&quot;** (กด Configure &gt; Root Directory &gt; thai-food-ai)&#10;   - คลิก **&quot;Deploy&quot;**&#10;   - รอประมาณ 5-10 นาที&#10;&#10;3. **เปิด Public URL:**&#10;   - ในหน้า Railway project คลิก **Settings**&#10;   - เลื่อนลงมาที่ **Networking**&#10;   - คลิก **&quot;Generate Domain&quot;**&#10;   - คุณจะได้ URL เช่น `https://thai-food-api.up.railway.app`&#10;&#10;4. **เชื่อมต่อ Frontend กับ Backend:**&#10;   &#10;   สร้างไฟล์ `.env` ใน Netlify:&#10;   - ไปที่ https://app.netlify.com/sites/th-ai-food/configuration/env&#10;   - คลิก **&quot;Add a variable&quot;**&#10;   - Key: `NEXT_PUBLIC_API_URL`&#10;   - Value: `https://your-api-url.up.railway.app` (URL ที่ได้จาก Railway)&#10;   - คลิก **&quot;Save&quot;**&#10;   - คลิก **&quot;Trigger deploy&quot;** เพื่อ rebuild เว็บ&#10;&#10;---&#10;&#10;### **วิธีที่ 2: Deploy ด้วย Render (ทางเลือก)**&#10;&#10;1. ไปที่ https://render.com&#10;2. Sign up ด้วย GitHub&#10;3. คลิก **&quot;New&quot;** → **&quot;Web Service&quot;**&#10;4. เลือก repository **&quot;ai-food&quot;**&#10;5. ตั้งค่า:&#10;   - **Name:** thai-food-api&#10;   - **Root Directory:** thai-food-ai&#10;   - **Runtime:** Python 3&#10;   - **Build Command:** `pip install -r requirements.txt`&#10;   - **Start Command:** `gunicorn api:app`&#10;6. คลิก **&quot;Create Web Service&quot;**&#10;7. รอประมาณ 10-15 นาที&#10;8. ได้ URL เช่น `https://thai-food-api.onrender.com`&#10;&#10;---&#10;&#10;### **วิธีที่ 3: Deploy บน Vercel (Python Serverless)**&#10;&#10;**หมายเหตุ:** Vercel มีข้อจำกัดสำหรับ Python (max 50MB, 10s timeout)&#10;&#10;1. เข้าไปยังโฟลเดอร์ Backend:&#10;   ```bash&#10;   cd thai-food-ai&#10;   ```&#10;&#10;2. Deploy:&#10;   ```bash&#10;   vercel&#10;   ```&#10;&#10;3. ตอบคำถาม:&#10;   - Setup and deploy? Yes&#10;   - Project name? thai-food-api&#10;   - Deploy? Yes&#10;&#10;---&#10;&#10;##  Checklist&#10;&#10;- [x] Frontend deployed บน Netlify&#10;- [ ] Backend deployed บน Railway/Render&#10;- [ ] เชื่อมต่อ Frontend กับ Backend (ตั้งค่า NEXT_PUBLIC_API_URL)&#10;- [ ] ทดสอบระบบทั้งหมด&#10;&#10;---&#10;&#10;##  เมื่อเสร็จแล้ว&#10;&#10;เว็บของคุณจะพร้อมใช้งานที่:&#10;- **Frontend:** https://th-ai-food.netlify.app&#10;- **Backend API:** https://your-api-url.up.railway.app&#10;&#10;ทดสอบโดยอัปโหลดรูปอาหารไทยแล้วดูว่าระบบทายชื่ออาหารได้ถูกต้องหรือไม่!&#10;&#10;---&#10;&#10;##  Tips&#10;&#10;1. **Model File ใหญ่:** ไฟล์ `thai_food_model.keras` อาจใหญ่เกิน 100MB&#10;   - ถ้า push ไม่ได้ ให้ใช้ Git LFS:&#10;     ```bash&#10;     git lfs install&#10;     git lfs track &quot;*.keras&quot;&#10;     git add .gitattributes&#10;     git add thai-food-ai/thai_food_model.keras&#10;     git commit -m &quot;Add model with Git LFS&quot;&#10;     git push&#10;     ```&#10;&#10;2. **Cold Start:** Backend อาจช้าในครั้งแรก (15-30 วินาที) เป็นเรื่องปกติของ Free Tier&#10;&#10;3. **Logs:** ดู logs ได้ที่:&#10;   - Netlify: https://app.netlify.com/sites/th-ai-food/deploys&#10;   - Railway: https://railway.app/project/78d5a64e-a1f5-4299-9cbc-4b35b9b1c933&#10;&#10;---&#10;&#10;##  ถ้ามีปัญหา&#10;&#10;1. ตรวจสอบ logs ใน Railway/Render&#10;2. ตรวจสอบว่า environment variable ถูกต้อง&#10;3. ตรวจสอบว่า CORS เปิดอยู่ใน API&#10;4. ลองเปิด API URL โดยตรงดูว่าทำงานหรือไม่ (เช่น https://your-api.up.railway.app/health)&#10;&#10;---&#10;&#10;Good luck! &#10;" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/package.json">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/package.json" />
              <option name="originalContent" value="{&#10;  &quot;name&quot;: &quot;ai-food&quot;,&#10;  &quot;version&quot;: &quot;0.1.0&quot;,&#10;  &quot;private&quot;: true,&#10;  &quot;scripts&quot;: {&#10;    &quot;dev&quot;: &quot;next dev --turbopack&quot;,&#10;    &quot;build&quot;: &quot;next build --turbopack&quot;,&#10;    &quot;start&quot;: &quot;next start&quot;,&#10;    &quot;lint&quot;: &quot;eslint&quot;&#10;  },&#10;  &quot;dependencies&quot;: {&#10;    &quot;react&quot;: &quot;19.1.0&quot;,&#10;    &quot;react-dom&quot;: &quot;19.1.0&quot;,&#10;    &quot;next&quot;: &quot;15.5.6&quot;&#10;  },&#10;  &quot;devDependencies&quot;: {&#10;    &quot;typescript&quot;: &quot;^5&quot;,&#10;    &quot;@types/node&quot;: &quot;^20&quot;,&#10;    &quot;@types/react&quot;: &quot;^19&quot;,&#10;    &quot;@types/react-dom&quot;: &quot;^19&quot;,&#10;    &quot;@tailwindcss/postcss&quot;: &quot;^4&quot;,&#10;    &quot;tailwindcss&quot;: &quot;^4&quot;,&#10;    &quot;eslint&quot;: &quot;^9&quot;,&#10;    &quot;eslint-config-next&quot;: &quot;15.5.6&quot;,&#10;    &quot;@eslint/eslintrc&quot;: &quot;^3&quot;&#10;  }&#10;}&#10;" />
              <option name="updatedContent" value="{&#10;  &quot;name&quot;: &quot;ai-food&quot;,&#10;  &quot;version&quot;: &quot;0.1.0&quot;,&#10;  &quot;private&quot;: true,&#10;  &quot;scripts&quot;: {&#10;    &quot;dev&quot;: &quot;next dev --turbopack&quot;,&#10;    &quot;build&quot;: &quot;next build&quot;,&#10;    &quot;start&quot;: &quot;next start&quot;,&#10;    &quot;lint&quot;: &quot;eslint&quot;&#10;  },&#10;  &quot;dependencies&quot;: {&#10;    &quot;next&quot;: &quot;15.5.6&quot;,&#10;    &quot;react&quot;: &quot;19.1.0&quot;,&#10;    &quot;react-dom&quot;: &quot;19.1.0&quot;&#10;  },&#10;  &quot;devDependencies&quot;: {&#10;    &quot;@eslint/eslintrc&quot;: &quot;^3&quot;,&#10;    &quot;@tailwindcss/postcss&quot;: &quot;^4&quot;,&#10;    &quot;@types/node&quot;: &quot;^20&quot;,&#10;    &quot;@types/react&quot;: &quot;^19&quot;,&#10;    &quot;@types/react-dom&quot;: &quot;^19&quot;,&#10;    &quot;eslint&quot;: &quot;^9&quot;,&#10;    &quot;eslint-config-next&quot;: &quot;15.5.6&quot;,&#10;    &quot;tailwindcss&quot;: &quot;^4&quot;,&#10;    &quot;typescript&quot;: &quot;^5&quot;&#10;  }&#10;}" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/vercel.json">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/vercel.json" />
              <option name="originalContent" value="&#10;" />
              <option name="updatedContent" value="{&#10;  &quot;framework&quot;: &quot;nextjs&quot;,&#10;  &quot;buildCommand&quot;: &quot;npm run build&quot;,&#10;  &quot;outputDirectory&quot;: &quot;.next&quot;&#10;}" />
            </PendingDiffInfo>
          </value>
        </entry>
      </map>
    </option>
  </component>
</project>